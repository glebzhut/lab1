#include "Graph.h"

void Demo()
{
	cout << "Hello user. Now I show you what can this program." << endl;
	cout << "Let's start from Dishones Dice. This default dice: ";
	DishonestDice d;
	cout << d << endl;
	cout << "This is a dice with 10 edges: ";
	d = DishonestDice(10);
	cout << d << endl;
	try
	{
		cout << "This is a dice with 9 edges: ";
		d = DishonestDice(9);
		cout << d << endl;
	}
	catch (logic_error e)
	{
		cout << e.what() << endl;
	}
	cout << "This a dice with 4 edges and chances 1-0.1, 2-0.2, 3-0.3, 4-0.4: ";
	d = DishonestDice(4, { 1,2,3,4 });
	cout << d << endl;
	cout << "This is autogenerated dice: ";
	d.AutoGenerate();
	cout << d << endl;
	system("pause");
	system("cls");

	cout << "Now i autogenerate two dices and count sum and chances." << endl;
	d.AutoGenerate();
	cout << "This is first dice: " << d << endl;
	DishonestDice d2;
	d2.AutoGenerate();
	cout << "This is second dice: " << d2 << endl;
	vector<DishonestDice> dices;
	dices.push_back(d);
	dices.push_back(d2);
	cout << "This sums and chances:" << endl;
	cout << GetStatistic(dices) << endl;
	system("pause");
	system("cls");
	cout << "This is all for dices.";
	cout << "Now Graph. I show you work with graph. For example I choose integer." << endl;
	cout << "Now I create empty undirected graph with 5 tops and zero element is 0." << endl;
	Graph<int> g(0, 5, 0);
	cout << g.GraphMatrix() << endl;;
	cout << "This information about tops:" << endl;
	g.InfoAboutTops();
	system("pause");
	cout << "Now I autogenerate undirected graph with 5 tops, 5 edges, zero element 0." << endl;
	for (int i = 0; i < 5; i++)
		g.ChangeTop(AutoGenerateInt(), i);
	for (int i = 0; i < 5; i++)
		g.AddEdge(rand() % 5, rand() % 5, AutoGenerateInt());
	cout << g.GraphMatrix() << endl;;
	cout << "This information about tops:" << endl;
	g.InfoAboutTops();
	system("pause");
	if (g.Check_Connected())
		cout << "Graph connected." << endl;
	else cout << "Graph not connected" << endl;
	cout << "This is minimal way table:" << endl;
	cout << g.Minimal_way_table() << endl;
	cout << "This list of edges:" << endl;
	g.PrintList();
	system("pause");
	cout << "Now I add edge between 1 and 3 with value 6." << endl;
	g.AddEdge(1, 3, 6);
	g.PrintList();
	cout << "Now I dell edge between 1 and 3." << endl;
	g.DelEdge(1, 3);
	g.PrintList();
	cout << "Now I delete 0 top." << endl;
	g.DelTop(1);
	cout << g.GraphMatrix() << endl;
	system("pause");
	cout << "This is all. Goodbye." << endl;
	system("pause");
}