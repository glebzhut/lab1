#include "DishonestDice.h"

ostream& operator<<(ostream& s, const DishonestDice& d)
{
	for (int i = 0; i < d.GetNumberOfEdges() - 1; i++)
		s << i + 1 << ": " << setprecision(5) << d.GetChance()[i] << "; ";
	s << d.GetNumberOfEdges() << ": " << setprecision(5) << d.GetChance()[d.GetNumberOfEdges() - 1];
	return s;
}

ostream& operator<<(ostream& s, const map<int, double> ch)
{
	for (const auto& i : ch)
		s << i.first << ": " << setprecision(5) << i.second << endl;
	return s;
}

ostream& operator<<(ostream& s, const vector<vector<int>> tb)
{
	for (const auto& i : tb)
		s << i;
	return s;
}

bool operator==(const DishonestDice& d1, const DishonestDice& d2)
{
	bool res = true;
	if (d1.GetNumberOfEdges() == d2.GetNumberOfEdges())
	{
		for (int i = 0; i < d1.GetNumberOfEdges(); i++)
			res = d1.GetChance()[i] == d2.GetChance()[i] && res;
		return res;
	}
	return false;
}

map<int,double> SumStats(map<int, double>& stats, const DishonestDice& d)
{
	map<int, double> res;
	vector<double> chance = d.GetChance();
	if (stats.size())
		for (const auto& i : stats)
			for (int j = 0; j < d.GetNumberOfEdges(); j++)
			{
				int sum = i.first + j + 1;
				double ch = i.second * chance[j];
				if (res.count(sum))
					res[sum] += ch;
				else res[sum] = ch;
			}
	else for (int i = 0; i < d.GetNumberOfEdges(); i++)
		res[i+1] = chance[i];
	return res;
}

map<int, double> GetStatistic(const vector<DishonestDice>& dices)
{
	map<int, double> res;
	for (int i = 0; i < dices.size(); i++)
		res = SumStats(res, dices[i]);
	return res;
}

int EnterNumber(const string& number)
{
	istringstream date_stream(number);
	bool ok = true;
	int new_number;
	ok = ok && (date_stream >> new_number);
	ok = ok && date_stream.eof();

	if (!ok)
	{
		throw logic_error("Wrong integer format: " + number);
	}
	return new_number;
}

double EnterDouble(const string& number)
{
	istringstream date_stream(number);
	bool ok = true;
	double new_number;
	ok = ok && (date_stream >> new_number);
	ok = ok && date_stream.eof();

	if (!ok)
	{
		throw logic_error("Wrong double format: " + number);
	}
	return new_number;
}

char EnterChar(const string& number)
{
	istringstream date_stream(number);
	bool ok = true;
	char new_char;
	ok = ok && (date_stream >> new_char);
	ok = ok && date_stream.eof();

	if (!ok)
	{
		throw logic_error("Wrong char format: " + number);
	}
	return new_char;
}

string EnterString(const string& number)
{
	istringstream date_stream(number);
	bool ok = true;
	string new_number;
	ok = ok && (date_stream >> new_number);
	ok = ok && date_stream.eof();

	if (!ok)
	{
		throw logic_error("Wrong number format: " + number);
	}
	return new_number;
}

DishonestDice EnterDice(const string& dice)
{
	istringstream date_stream(dice);
	bool ok = true;
	int new_number;
	ok = ok && (date_stream >> new_number);
	vector<int> ch;
	for (int i = 0; i < new_number; i++)
	{
		int new_chance;
		ok = ok && (date_stream >> new_chance);
		ch.push_back(new_chance);
	}

	ok = ok && date_stream.eof();

	if (!ok)
	{
		throw logic_error("Wrong integer format: " + dice);
	}
	return DishonestDice(new_number,ch);
}

int AutoGenerateInt()
{
	return rand();
}

char AutoGenerateChar()
{
	return (41 + rand() % 100);
}

double AutoGenerateDouble()
{
	double r = rand();
	return r / 1000;
}

string AutoGenerateString()
{
	string word = "";
	int sz = rand() % 10 + 1;
	for (int i = 0; i < sz; i++)
		word += (char)((int)'a' + rand() % 25);
	return(word);
}

DishonestDice AutoGenerateDishonestDice()
{
	DishonestDice d;
	d.AutoGenerate();
	return d;
}
