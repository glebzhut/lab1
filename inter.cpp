#include "Graph.h"

void DishonDices()
{
	DishonestDice work_dice;
	const string types[6]
	{
		"Enter dice;",
		"Autogenerate dice;",
		"Show chances;",
		"Show chances for dices;",
		"Show chances for dices(autogenerated);",
		"Back."
	};
	int position = 0;
	bool end = false;

	while (!end)
	{
		system("cls");
		cout << "    You can do next operations:" << endl;
		for (int i = 0; i < 6; i++)
		{
			if (i == position)
				cout << "->  " << types[i] << endl;
			else cout << "    " << types[i] << endl;
		}

		char key;
		key = _getch();
		if ((int)key != 13)
		{
			if ((int)key == -32)
			{
				key = _getch();
				if ((int)key == 72)
				{
					if (position > 0)
						position--;
					else position = 5;
				}

				if ((int)key == 80)
				{
					if (position < 5)
						position++;
					else position = 0;
				}
			}
		}
		else
		{
			int numedges = 0;
			int numdices = 0;
			string line = "";
			vector<DishonestDice> dd;
			vector<int> stats;
			system("cls");
			try
			{
				switch (position)
				{
				case 0:

					cout << "Enter number of edges(2,4,6,10,12,20)" << endl;
					getline(cin, line);
					numedges = EnterNumber(line);
					for (int i = 0; i < numedges; i++)
					{
						cout << "Enter the number of drop-downs" << endl;
						getline(cin, line);
						stats.push_back(EnterNumber(line));
					}
					work_dice = DishonestDice(numedges, stats);
					system("pause");
					break;
				case 1:
					work_dice.AutoGenerate();
					system("pause");
					break;
				case 2:
					cout << work_dice << endl;
					system("pause");
					break;
				case 3:
					cout << "Enter number of dices" << endl;
					getline(cin, line);
					numdices = EnterNumber(line);
					for (int i = 0; i < numdices; i++)
					{
						cout << "Enter number of edges(2,4,6,10,12,20)" << endl;
						getline(cin, line);
						numedges = EnterNumber(line);
						for (int i = 0; i < numedges; i++)
						{
							cout << "Enter the number of drop-downs" << endl;
							getline(cin, line);
							stats.push_back(EnterNumber(line));
						}
						dd.push_back(DishonestDice(numedges, stats));
						system("cls");
					}
					for (int i = 0; i < numdices; i++)
						cout << dd[i] << endl;
					cout << GetStatistic(dd) << endl;
					system("pause");
					break;
				case 4:
					cout << "Enter number of dices" << endl;
					getline(cin, line);
					numdices = EnterNumber(line);
					for (int i = 0; i < numdices; i++)
					{
						work_dice.AutoGenerate();
						dd.push_back(work_dice);
						system("cls");
					}
					for (int i = 0; i < numdices; i++)
						cout << dd[i] << endl;
					cout << GetStatistic(dd) << endl;
					system("pause");
					break;
				case 5:
					end = true;
					break;
				default:
					break;
				}
			}
			catch (logic_error& e)
			{
				cout << e.what() << endl;
				system("pause");
			}
		}
	}
}

template<typename T>
void Graphmenu(Graph<T> work_graph, T (*input_function)(const string&), T (*random_function)())
{
	const string types[14]
	{
		"Create graph;",
		"Add top;",
		"Change top;",
		"Delete top;",
		"Add edge;",
		"Delete edge;",
		"Autogenerate graph;",
		"Check coniction graph;",
		"Get information about tops;",
		"Graph matrix;",
		"Graph list;",
		"Minimal way table;",
		"Minimal way;",
		"Back."
	};
	int position = 0;
	bool end = false;

	while (!end)
	{
		system("cls");
		cout << "    Choose one of next operations:" << endl;
		for (int i = 0; i < 14; i++)
		{
			if (i == position)
				cout << "->  " << types[i] << endl;
			else cout << "    " << types[i] << endl;
		}

		char key;
		key = _getch();
		if ((int)key != 13)
		{
			if ((int)key == -32)
			{
				key = _getch();
				if ((int)key == 72)
				{
					if (position > 0)
						position--;
					else position = 13;
				}

				if ((int)key == 80)
				{
					if (position < 13)
						position++;
					else position = 0;
				}
			}
		}
		else
		{
			int index = 0;
			int index1 = 0;
			T element;
			bool directed = 0;
			string line = "";
			int number_of_elements = 0;
			int numedges = 0;
			T zero_val;
			system("cls");
			try
			{
				switch (position)
				{
				case 0:
					cout << "Enter type of graph(0 - undirected, 1 - directed)." << endl;
					getline(cin, line);
					directed = EnterNumber(line);
					cout << "Enter number of tops." << endl;
					getline(cin, line);
					number_of_elements = EnterNumber(line);
					cout << "Enter number enter zero element." << endl;
					getline(cin, line);
					zero_val = input_function(line);
					work_graph = Graph<T>(directed, number_of_elements, zero_val);
					system("pause");
					break;
				case 1:
					cout << "Enter element." << endl;
					getline(cin, line);
					element = input_function(line);
					work_graph.NewTop(element);
					system("pause");
					break;
				case 2:
					cout << "Enter number of top." << endl;
					getline(cin, line);
					index = EnterNumber(line);
					cout << "Enter new value." << endl;
					getline(cin, line);
					element = input_function(line);
					work_graph.ChangeTop(element, index);
					system("pause");
					break;
				case 3:
					cout << "Enter number of top." << endl;
					getline(cin, line);
					index = EnterNumber(line);
					work_graph.DelTop(index);
					system("pause");
					break;
				case 4:
					cout << "Enter number of start top." << endl;
					getline(cin, line);
					index = EnterNumber(line);
					cout << "Enter number of finish top." << endl;
					getline(cin, line);
					index1 = EnterNumber(line);
					cout << "Enter new value." << endl;
					getline(cin, line);
					element = input_function(line);
					work_graph.AddEdge(index, index1, element);
					system("pause");
					break;
				case 5:
					cout << "Enter number of start top." << endl;
					getline(cin, line);
					index = EnterNumber(line);
					cout << "Enter number of finish top." << endl;
					getline(cin, line);
					index1 = EnterNumber(line);
					work_graph.DelEdge(index, index1);
					system("pause");
					break;
				case 6:
					cout << "Enter type of graph(0 - undirected, 1 - directed)." << endl;
					getline(cin, line);
					directed = EnterNumber(line);
					cout << "Enter number of tops." << endl;
					getline(cin, line);
					number_of_elements = EnterNumber(line);
					cout << "Enter number enter zero element." << endl;
					getline(cin, line);
					zero_val = input_function(line);
					work_graph = Graph<T>(directed, number_of_elements, zero_val);
					for (int i = 0; i < number_of_elements; i++)
						work_graph.ChangeTop(random_function(), i);
					cout << "Enter number of edges." << endl;
					getline(cin, line);
					numedges = EnterNumber(line);
					for (int i = 0; i < numedges; i++)
						work_graph.AddEdge(rand() % number_of_elements, rand() % number_of_elements, random_function());
					system("pause");
					break;
				case 7:
					if (work_graph.Check_Connected())
						cout << "Graph connected." << endl;
					else cout << "Graph not connected" << endl;
					system("pause");
					break;
				case 8:
					work_graph.InfoAboutTops();
					cout << endl;
					system("pause");
					break;
				case 9:
					cout << work_graph.GraphMatrix() << endl;
					system("pause");
					break;
				case 10:
					work_graph.PrintList();
					cout << endl;
					system("pause");
					break;
				case 11:
					cout << work_graph.Minimal_way_table() << endl;
					system("pause");
					break;
				case 12:
					cout << "Enter number of start top." << endl;
					getline(cin, line);
					index = EnterNumber(line);
					cout << "Enter number of finish top." << endl;
					getline(cin, line);
					index1 = EnterNumber(line);
					cout << work_graph.Minimal_way(index, index1) << endl;;
					system("pause");
					break;
				case 13:
					end = true;
					break;
				default:
					break;
				}
			}
			catch (logic_error e)
			{
				cout << e.what() << endl;
				system("pause");
			}
		}
	}
}

void GraphMenu()
{
	const string types[6]
	{
		"Integer;",
		"Double;",
		"Char;",
		"String;",
		"Dishonest dice;",
		"Back."
	};
	int position = 0;
	bool end = false;

	while (!end)
	{
		system("cls");
		cout << "    Choose the class with which you want work:" << endl;
		for (int i = 0; i < 6; i++)
		{
			if (i == position)
				cout << "->  " << types[i] << endl;
			else cout << "    " << types[i] << endl;
		}

		char key;
		key = _getch();
		if ((int)key != 13)
		{
			if ((int)key == -32)
			{
				key = _getch();
				if ((int)key == 72)
				{
					if (position > 0)
						position--;
					else position = 5;
				}

				if ((int)key == 80)
				{
					if (position < 5)
						position++;
					else position = 0;
				}
			}
		}
		else
		{
			system("cls");
			switch (position)
			{
			case 0:
				Graphmenu(Graph<int>(), EnterNumber, AutoGenerateInt);
				break;
			case 1:
				Graphmenu(Graph<double>(), EnterDouble, AutoGenerateDouble);
				break;
			case 2:
				Graphmenu(Graph<char>(), EnterChar, AutoGenerateChar);
				break;
			case 3:
				Graphmenu(Graph<string>(), EnterString, AutoGenerateString);
				break;
			case 4:
				Graphmenu(Graph<DishonestDice>(), EnterDice, AutoGenerateDishonestDice);
				break;
			case 5:
				end = true;
				break;
			default:
				break;
			}
		}
	}
}

void inter()
{
	const string types[3]
	{
		"Dishonest dice;",
		"Graph;",
		"Back."
	};
	int position = 0;
	bool end = false;

	while (!end)
	{
		system("cls");
		cout << "    Choose the class with which you want work:" << endl;
		for (int i = 0; i < 3; i++)
		{
			if (i == position)
				cout << "->  " << types[i] << endl;
			else cout << "    " << types[i] << endl;
		}

		char key;
		key = _getch();
		if ((int)key != 13)
		{
			if ((int)key == -32)
			{
				key = _getch();
				if ((int)key == 72)
				{
					if (position > 0)
						position--;
					else position = 2;
				}

				if ((int)key == 80)
				{
					if (position < 2)
						position++;
					else position = 0;
				}
			}
		}
		else
		{
			system("cls");
			switch (position)
			{
			case 0:
				DishonDices();
				break;
			case 1:
				GraphMenu();
				break;
			case 2:
				end = true;
				break;
			}
		}
	}
}